import csv
import json

from scipy import stats
import scikit_posthocs as sp
import numpy as np


def is_transition_of_interest(source, target):
    transitions_of_interest = {
        'B': ['B,dh', 'B,db', 'B,dh,db'],
        'B,dh': ['B,dh,db'],
        'B,db': ['B,dh,db'],
        'H,B': ['H,B,dh', 'H,B,db', 'H,B,dh,db'],
        'H,B,dh': ['H,B,dh,db'],
        'H,B,db': ['H,B,dh,db'],
        'H': ['H,dh', 'H,db', 'H,dh,db'],
        'H,dh': ['H,dh,db'],
        'H,db': ['H,dh,db'],
    }
    return source in transitions_of_interest and target in transitions_of_interest[source]


accuracy_data = {
    'L2': {
        'B': {
            'B': [0.45, 0.64, 0.79, 0.82, 0.84, 0.79, 0.79, 0.79, 0.79, 0.46, 0.46, 0.46, 0.50, 0.74, 0.73, 0.73, 0.73,
                  0.73, 0.44, 0.44, 0.45, 0.57, 0.66, 0.74, 0.73, 0.72, 0.72, 0.44, 0.44, 0.45, 0.50, 0.57, 0.64, 0.67,
                  0.68, 0.68, 0.65, 0.68, 0.66],
            'B,db': [0.45, 0.65, 0.77, 0.82, 0.83, 0.79, 0.79, 0.79, 0.79, 0.46, 0.46, 0.46, 0.48, 0.73, 0.72, 0.72,
                     0.72, 0.72, 0.44, 0.44, 0.44, 0.56, 0.65, 0.72, 0.71, 0.71, 0.71, 0.44, 0.44, 0.44, 0.51, 0.54,
                     0.61, 0.64, 0.67, 0.68, 0.63, 0.64, 0.66],
            'B,dh': [0.45, 0.67, 0.78, 0.81, 0.78, 0.77, 0.77, 0.77, 0.77, 0.46, 0.46, 0.46, 0.48, 0.76, 0.73, 0.73,
                     0.73, 0.73, 0.45, 0.45, 0.45, 0.55, 0.64, 0.72, 0.71, 0.71, 0.71, 0.44, 0.44, 0.44, 0.49, 0.57,
                     0.61, 0.65, 0.65, 0.64, 0.64, 0.71, 0.69],
            'B,dh,db': [0.45, 0.67, 0.78, 0.79, 0.79, 0.78, 0.78, 0.78, 0.78, 0.46, 0.46, 0.46, 0.47, 0.75, 0.72, 0.72,
                        0.72, 0.72, 0.45, 0.45, 0.45, 0.54, 0.62, 0.69, 0.69, 0.69, 0.69, 0.44, 0.44, 0.44, 0.48, 0.55,
                        0.60, 0.61, 0.65, 0.65, 0.61, 0.70, 0.68],
        },
        'H,B': {
            'H,B': [0.46, 0.73, 0.80, 0.85, 0.85, 0.84, 0.84, 0.84, 0.84, 0.46, 0.46, 0.46, 0.56, 0.78, 0.81, 0.81,
                    0.81, 0.81, 0.45, 0.45, 0.45, 0.61, 0.72, 0.76, 0.76, 0.76, 0.76, 0.44, 0.44, 0.44, 0.53, 0.64,
                    0.69, 0.73, 0.74, 0.74, 0.73, 0.74, 0.73],
            'H,B,db': [0.46, 0.74, 0.79, 0.84, 0.86, 0.85, 0.85, 0.85, 0.85, 0.46, 0.46, 0.46, 0.52, 0.78, 0.80, 0.80,
                       0.80, 0.80, 0.45, 0.45, 0.45, 0.59, 0.72, 0.76, 0.77, 0.77, 0.77, 0.44, 0.44, 0.44, 0.51, 0.61,
                       0.68, 0.72, 0.72, 0.73, 0.72, 0.75, 0.74],
            'H,B,dh': [0.46, 0.75, 0.82, 0.82, 0.83, 0.83, 0.83, 0.83, 0.83, 0.47, 0.47, 0.47, 0.51, 0.82, 0.82, 0.82,
                       0.82, 0.82, 0.44, 0.44, 0.44, 0.58, 0.71, 0.74, 0.75, 0.75, 0.75, 0.44, 0.44, 0.44, 0.51, 0.61,
                       0.66, 0.71, 0.72, 0.71, 0.69, 0.77, 0.73],
            'H,B,dh,db': [0.46, 0.76, 0.82, 0.81, 0.83, 0.84, 0.84, 0.84, 0.84, 0.47, 0.47, 0.47, 0.50, 0.80, 0.81,
                          0.81, 0.81, 0.81, 0.45, 0.45, 0.45, 0.56, 0.71, 0.73, 0.76, 0.76, 0.76, 0.44, 0.44, 0.44,
                          0.51, 0.60, 0.64, 0.69, 0.72, 0.72, 0.69, 0.75, 0.74],
        },
        'H': {
            'H': [0.46, 0.57, 0.73, 0.76, 0.85, 0.87, 0.87, 0.83, 0.82, 0.46, 0.46, 0.46, 0.62, 0.76, 0.79, 0.76, 0.76,
                  0.76, 0.45, 0.45, 0.47, 0.57, 0.68, 0.70, 0.70, 0.67, 0.69, 0.44, 0.44, 0.50, 0.57, 0.63, 0.67, 0.67,
                  0.65, 0.66, 0.74, 0.76, 0.77],
            'H,db': [0.46, 0.57, 0.74, 0.75, 0.85, 0.87, 0.84, 0.79, 0.79, 0.46, 0.46, 0.46, 0.56, 0.76, 0.76, 0.75,
                     0.75, 0.75, 0.45, 0.45, 0.45, 0.56, 0.68, 0.70, 0.66, 0.66, 0.66, 0.44, 0.44, 0.46, 0.53, 0.62,
                     0.66, 0.65, 0.64, 0.65, 0.72, 0.74, 0.77],
            'H,dh': [0.47, 0.60, 0.81, 0.80, 0.81, 0.79, 0.75, 0.74, 0.74, 0.47, 0.47, 0.47, 0.51, 0.81, 0.76, 0.73,
                     0.73, 0.73, 0.44, 0.44, 0.45, 0.54, 0.68, 0.70, 0.67, 0.68, 0.68, 0.44, 0.44, 0.46, 0.54, 0.59,
                     0.66, 0.65, 0.66, 0.65, 0.74, 0.76, 0.77],
            'H,dh,db': [0.47, 0.60, 0.81, 0.79, 0.78, 0.76, 0.73, 0.73, 0.73, 0.47, 0.47, 0.47, 0.48, 0.80, 0.73, 0.71,
                        0.71, 0.71, 0.44, 0.44, 0.45, 0.52, 0.70, 0.70, 0.67, 0.66, 0.66, 0.44, 0.44, 0.46, 0.51, 0.58,
                        0.62, 0.60, 0.62, 0.62, 0.73, 0.78, 0.78],
        }
    },
    'L3': {
        'B': {
            'B': [0.45, 0.47, 0.68, 0.72, 0.71, 0.68, 0.69, 0.69, 0.69, 0.45, 0.45, 0.45, 0.46, 0.68, 0.68, 0.68, 0.68,
                  0.68, 0.44, 0.44, 0.44, 0.45, 0.63, 0.65, 0.65, 0.64, 0.62, 0.44, 0.43, 0.43, 0.47, 0.57, 0.60, 0.59,
                  0.63, 0.62, 0.57, 0.67, 0.64],
            'B,db': [0.45, 0.48, 0.67, 0.73, 0.75, 0.69, 0.68, 0.68, 0.68, 0.45, 0.45, 0.45, 0.46, 0.68, 0.70, 0.67,
                     0.67, 0.67, 0.44, 0.44, 0.44, 0.45, 0.62, 0.66, 0.65, 0.65, 0.64, 0.44, 0.44, 0.44, 0.47, 0.56,
                     0.59, 0.60, 0.63, 0.62, 0.55, 0.67, 0.64],
            'B,dh': [0.45, 0.50, 0.74, 0.77, 0.74, 0.71, 0.71, 0.71, 0.71, 0.46, 0.46, 0.46, 0.46, 0.71, 0.66, 0.66,
                     0.66, 0.66, 0.44, 0.44, 0.44, 0.46, 0.60, 0.66, 0.67, 0.67, 0.67, 0.44, 0.44, 0.43, 0.50, 0.53,
                     0.57, 0.62, 0.66, 0.66, 0.58, 0.65, 0.65],
            'B,dh,db': [0.45, 0.50, 0.74, 0.76, 0.75, 0.71, 0.71, 0.71, 0.71, 0.46, 0.46, 0.46, 0.46, 0.71, 0.65, 0.65,
                        0.65, 0.65, 0.44, 0.44, 0.44, 0.45, 0.59, 0.65, 0.65, 0.65, 0.65, 0.44, 0.44, 0.43, 0.49, 0.54,
                        0.56, 0.60, 0.64, 0.65, 0.55, 0.67, 0.64],
        },
        'H,B': {
            'H,B': [0.46, 0.62, 0.78, 0.84, 0.86, 0.83, 0.83, 0.83, 0.83, 0.46, 0.46, 0.46, 0.46, 0.77, 0.78, 0.78,
                    0.78, 0.78, 0.44, 0.44, 0.44, 0.49, 0.72, 0.75, 0.72, 0.74, 0.71, 0.44, 0.44, 0.45, 0.52, 0.61,
                    0.67, 0.67, 0.67, 0.69, 0.69, 0.71, 0.68],
            'H,B,db': [0.46, 0.63, 0.78, 0.83, 0.85, 0.82, 0.82, 0.82, 0.82, 0.46, 0.46, 0.46, 0.46, 0.76, 0.77, 0.76,
                       0.76, 0.76, 0.44, 0.44, 0.44, 0.49, 0.71, 0.73, 0.72, 0.73, 0.73, 0.44, 0.44, 0.45, 0.51, 0.61,
                       0.65, 0.67, 0.68, 0.69, 0.68, 0.72, 0.69],
            'H,B,dh': [0.46, 0.67, 0.80, 0.84, 0.85, 0.84, 0.84, 0.84, 0.84, 0.47, 0.47, 0.47, 0.47, 0.78, 0.76, 0.76,
                       0.76, 0.76, 0.45, 0.45, 0.45, 0.49, 0.69, 0.71, 0.72, 0.74, 0.74, 0.44, 0.44, 0.44, 0.50, 0.57,
                       0.61, 0.63, 0.63, 0.69, 0.69, 0.71, 0.68],
            'H,B,dh,db': [0.46, 0.67, 0.80, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.46, 0.46, 0.46, 0.46, 0.78, 0.75,
                          0.75, 0.75, 0.75, 0.45, 0.45, 0.45, 0.48, 0.68, 0.71, 0.71, 0.73, 0.73, 0.44, 0.44, 0.44,
                          0.49, 0.57, 0.61, 0.64, 0.64, 0.69, 0.69, 0.71, 0.68],
        },
        'H': {
            'H': [0.46, 0.48, 0.73, 0.81, 0.88, 0.87, 0.86, 0.82, 0.78, 0.46, 0.46, 0.46, 0.52, 0.76, 0.77, 0.74, 0.74,
                  0.74, 0.44, 0.44, 0.46, 0.55, 0.65, 0.73, 0.73, 0.70, 0.71, 0.44, 0.44, 0.46, 0.56, 0.60, 0.64, 0.68,
                  0.67, 0.66, 0.67, 0.74, 0.71],
            'H,db': [0.46, 0.48, 0.72, 0.80, 0.87, 0.85, 0.81, 0.76, 0.75, 0.46, 0.46, 0.46, 0.48, 0.75, 0.73, 0.70,
                     0.70, 0.70, 0.44, 0.44, 0.44, 0.54, 0.66, 0.71, 0.70, 0.69, 0.69, 0.44, 0.44, 0.47, 0.54, 0.59,
                     0.64, 0.66, 0.65, 0.66, 0.66, 0.68, 0.69],
            'H,dh': [0.45, 0.50, 0.77, 0.78, 0.83, 0.80, 0.77, 0.77, 0.77, 0.47, 0.47, 0.47, 0.49, 0.77, 0.73, 0.72,
                     0.72, 0.72, 0.44, 0.44, 0.43, 0.53, 0.68, 0.71, 0.69, 0.69, 0.69, 0.44, 0.43, 0.45, 0.50, 0.61,
                     0.65, 0.66, 0.65, 0.67, 0.67, 0.71, 0.69],
            'H,dh,db': [0.46, 0.51, 0.77, 0.77, 0.81, 0.77, 0.77, 0.77, 0.77, 0.47, 0.47, 0.47, 0.47, 0.76, 0.73, 0.73,
                        0.73, 0.73, 0.44, 0.44, 0.44, 0.53, 0.68, 0.69, 0.72, 0.73, 0.73, 0.44, 0.44, 0.46, 0.48, 0.59,
                        0.64, 0.66, 0.69, 0.70, 0.67, 0.68, 0.67],
        }
    },
    'L4': {
        'B': {
            'B': [0.45, 0.61, 0.69, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.44, 0.44, 0.44, 0.44, 0.68, 0.70, 0.70, 0.70,
                  0.70, 0.44, 0.44, 0.44, 0.44, 0.54, 0.63, 0.65, 0.65, 0.65, 0.44, 0.44, 0.43, 0.45, 0.52, 0.57, 0.60,
                  0.61, 0.62, 0.58, 0.62, 0.61],
            'B,db': [0.45, 0.62, 0.68, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.44, 0.44, 0.44, 0.44, 0.67, 0.68, 0.68,
                     0.68, 0.68, 0.44, 0.44, 0.44, 0.44, 0.54, 0.61, 0.62, 0.62, 0.62, 0.44, 0.44, 0.43, 0.44, 0.52,
                     0.57, 0.58, 0.59, 0.60, 0.58, 0.61, 0.63],
            'B,dh': [0.45, 0.64, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.45, 0.45, 0.45, 0.45, 0.71, 0.71, 0.71,
                     0.71, 0.71, 0.44, 0.44, 0.44, 0.45, 0.55, 0.64, 0.63, 0.63, 0.63, 0.44, 0.44, 0.44, 0.44, 0.51,
                     0.56, 0.56, 0.58, 0.58, 0.55, 0.63, 0.59],
            'B,dh,db': [0.45, 0.64, 0.75, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.45, 0.45, 0.45, 0.45, 0.71, 0.70, 0.70,
                        0.70, 0.70, 0.44, 0.44, 0.44, 0.45, 0.55, 0.63, 0.64, 0.64, 0.64, 0.44, 0.44, 0.44, 0.44, 0.49,
                        0.54, 0.57, 0.57, 0.57, 0.56, 0.64, 0.61],
        },
        'H,B': {
            'H,B': [0.45, 0.77, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.46, 0.46, 0.46, 0.46, 0.79, 0.77, 0.77,
                    0.77, 0.77, 0.44, 0.44, 0.44, 0.46, 0.62, 0.71, 0.69, 0.69, 0.69, 0.44, 0.44, 0.44, 0.45, 0.54,
                    0.61, 0.62, 0.61, 0.61, 0.66, 0.73, 0.70],
            'H,B,db': [0.45, 0.77, 0.77, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.46, 0.46, 0.46, 0.46, 0.78, 0.76, 0.76,
                       0.76, 0.76, 0.45, 0.45, 0.45, 0.45, 0.62, 0.70, 0.69, 0.69, 0.69, 0.44, 0.44, 0.44, 0.45, 0.54,
                       0.60, 0.62, 0.61, 0.61, 0.65, 0.72, 0.69],
            'H,B,dh': [0.45, 0.80, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.46, 0.46, 0.46, 0.46, 0.79, 0.78, 0.78,
                       0.78, 0.78, 0.44, 0.44, 0.44, 0.45, 0.60, 0.68, 0.67, 0.67, 0.67, 0.44, 0.44, 0.44, 0.44, 0.52,
                       0.58, 0.57, 0.59, 0.59, 0.62, 0.72, 0.68],
            'H,B,dh,db': [0.45, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.46, 0.46, 0.46, 0.46, 0.78, 0.78,
                          0.78, 0.78, 0.78, 0.44, 0.44, 0.44, 0.45, 0.59, 0.69, 0.67, 0.67, 0.67, 0.44, 0.44, 0.44,
                          0.44, 0.52, 0.58, 0.58, 0.59, 0.59, 0.62, 0.73, 0.68],
        },
        'H': {
            'H': [0.46, 0.73, 0.80, 0.83, 0.81, 0.81, 0.81, 0.81, 0.81, 0.46, 0.46, 0.46, 0.46, 0.79, 0.77, 0.77, 0.77,
                  0.77, 0.44, 0.44, 0.44, 0.52, 0.68, 0.74, 0.72, 0.72, 0.72, 0.44, 0.44, 0.44, 0.51, 0.59, 0.66, 0.67,
                  0.66, 0.65, 0.73, 0.76, 0.75],
            'H,db': [0.46, 0.73, 0.78, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.46, 0.46, 0.46, 0.46, 0.77, 0.76, 0.76,
                     0.76, 0.76, 0.44, 0.44, 0.44, 0.48, 0.63, 0.72, 0.71, 0.71, 0.71, 0.44, 0.44, 0.44, 0.47, 0.57,
                     0.63, 0.64, 0.64, 0.62, 0.71, 0.75, 0.73],
            'H,dh': [0.46, 0.78, 0.81, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.46, 0.46, 0.46, 0.46, 0.79, 0.79, 0.79,
                     0.79, 0.79, 0.44, 0.44, 0.44, 0.46, 0.65, 0.75, 0.75, 0.75, 0.75, 0.44, 0.44, 0.44, 0.46, 0.55,
                     0.61, 0.63, 0.65, 0.65, 0.70, 0.76, 0.72],
            'H,dh,db': [0.46, 0.77, 0.80, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.47, 0.47, 0.47, 0.47, 0.79, 0.78, 0.78,
                        0.78, 0.78, 0.44, 0.44, 0.44, 0.46, 0.62, 0.71, 0.74, 0.74, 0.74, 0.44, 0.44, 0.44, 0.46, 0.53,
                        0.60, 0.62, 0.63, 0.63, 0.69, 0.72, 0.72],
        }
    }
}


def build_friedman_chi_square(data, l, g):
    return stats.friedmanchisquare(
        data[l]['{0}'.format(g)]['{0}'.format(g)],
        data[l]['{0}'.format(g)]['{0},dh'.format(g)],
        data[l]['{0}'.format(g)]['{0},db'.format(g)],
        data[l]['{0}'.format(g)]['{0},dh,db'.format(g)])


def build_nemenyi_friedman(data, l, g):
    df = sp.posthoc_nemenyi_friedman(
        np.array(
            [
                data[l]['{0}'.format(g)]['{0}'.format(g)],
                data[l]['{0}'.format(g)]['{0},dh'.format(g)],
                data[l]['{0}'.format(g)]['{0},db'.format(g)],
                data[l]['{0}'.format(g)]['{0},dh,db'.format(g)]
            ]).T
    )
    df.index = build_pd_labels(g)
    df.columns = build_pd_labels(g)
    return df.to_dict(orient='index')


def build_pd_labels(g):
    return ['{0}'.format(g), '{0},dh'.format(g), '{0},db'.format(g), '{0},dh,db'.format(g)]


results = []

for level in ['L2', 'L3', 'L4']:
    for base_group in ['B', 'H', 'H,B']:
        _, friedman_p = build_friedman_chi_square(accuracy_data, level, base_group)
        results.append(
            {
                'level': level,
                'base_group': base_group,
                'friedman_p': friedman_p,
                'nemenyi': build_nemenyi_friedman(accuracy_data, level, base_group)
            })

print(results)

header = ['Nível', 'Grupo Base', 'Friedman p', 'Tratamento', 'Tratamento', 'Transicao p']
values = []

for result in results:
    if float(result['friedman_p']) < 0.05:
        base_group = result['base_group']
        nemenyi_record = result['nemenyi']
        for source_group in build_pd_labels(base_group):
            for target_group in build_pd_labels(base_group):
                if is_transition_of_interest(source_group, target_group):
                    values.append(
                        [
                            result['level'],
                            result['base_group'],
                            result['friedman_p'],
                            source_group,
                            target_group,
                            nemenyi_record[source_group][target_group]
                        ])
    else:
        values.append(
            [
                result['level'],
                result['base_group'],
                '{0:0.8f}'.format(result['friedman_p']),
                'n/a',
                'n/a',
                'n/a'
            ])

fwrite = open('posthoc_results.json', 'w')
json.dump(results, fwrite, indent=2)
fwrite.close()

with open('posthoc_results.csv', 'w') as file:
    writer = csv.writer(file, dialect='excel')
    writer.writerow(header)
    writer.writerows(values)
